{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar _ = require('underscore');\n\nvar BN = require('bn.js');\n\nvar numberToBN = require('number-to-bn');\n\nvar utf8 = require('utf8');\n\nvar Hash = require(\"eth-lib/lib/hash\");\n\nvar ethereumBloomFilters = require('ethereum-bloom-filters');\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\n\n\nvar isBN = function isBN(object) {\n  return BN.isBN(object);\n};\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\n\n\nvar isBigNumber = function isBigNumber(object) {\n  return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\n\n\nvar toBN = function toBN(number) {\n  try {\n    return numberToBN.apply(null, arguments);\n  } catch (e) {\n    throw new Error(e + ' Given value: \"' + number + '\"');\n  }\n};\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\n\n\nvar toTwosComplement = function toTwosComplement(number) {\n  return '0x' + toBN(number).toTwos(256).toString(16, 64);\n};\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\n\n\nvar isAddress = function isAddress(address) {\n  // check if it has the basic requirements of an address\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false; // If it's ALL lowercase or ALL upppercase\n  } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n    return true; // Otherwise check each case\n  } else {\n    return checkAddressChecksum(address);\n  }\n};\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\n\n\nvar checkAddressChecksum = function checkAddressChecksum(address) {\n  // Check each case\n  address = address.replace(/^0x/i, '');\n  var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');\n\n  for (var i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\n\nvar leftPad = function leftPad(string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\n\nvar rightPad = function rightPad(string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + string + new Array(padding).join(sign ? sign : \"0\");\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\n\n\nvar utf8ToHex = function utf8ToHex(str) {\n  str = utf8.encode(str);\n  var hex = \"\"; // remove \\u0000 padding from either side\n\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split(\"\").reverse().join(\"\");\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split(\"\").reverse().join(\"\");\n\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i); // if (code !== 0) {\n\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n; // }\n  }\n\n  return \"0x\" + hex;\n};\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\n\n\nvar hexToUtf8 = function hexToUtf8(hex) {\n  if (!isHexStrict(hex)) throw new Error('The parameter \"' + hex + '\" must be a valid HEX string.');\n  var str = \"\";\n  var code = 0;\n  hex = hex.replace(/^0x/i, ''); // remove 00 padding from either side\n\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split(\"\").reverse().join(\"\");\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split(\"\").reverse().join(\"\");\n  var l = hex.length;\n\n  for (var i = 0; i < l; i += 2) {\n    code = parseInt(hex.substr(i, 2), 16); // if (code !== 0) {\n\n    str += String.fromCharCode(code); // }\n  }\n\n  return utf8.decode(str);\n};\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nvar hexToNumber = function hexToNumber(value) {\n  if (!value) {\n    return value;\n  }\n\n  if (_.isString(value) && !isHexStrict(value)) {\n    throw new Error('Given value \"' + value + '\" is not a valid hex string.');\n  }\n\n  return toBN(value).toNumber();\n};\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nvar hexToNumberString = function hexToNumberString(value) {\n  if (!value) return value;\n\n  if (_.isString(value) && !isHexStrict(value)) {\n    throw new Error('Given value \"' + value + '\" is not a valid hex string.');\n  }\n\n  return toBN(value).toString(10);\n};\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nvar numberToHex = function numberToHex(value) {\n  if (_.isNull(value) || _.isUndefined(value)) {\n    return value;\n  }\n\n  if (!isFinite(value) && !isHexStrict(value)) {\n    throw new Error('Given input \"' + value + '\" is not a number.');\n  }\n\n  var number = toBN(value);\n  var result = number.toString(16);\n  return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\n\n\nvar bytesToHex = function bytesToHex(bytes) {\n  for (var hex = [], i = 0; i < bytes.length; i++) {\n    /* jshint ignore:start */\n    hex.push((bytes[i] >>> 4).toString(16));\n    hex.push((bytes[i] & 0xF).toString(16));\n    /* jshint ignore:end */\n  }\n\n  return '0x' + hex.join(\"\");\n};\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\n\n\nvar hexToBytes = function hexToBytes(hex) {\n  hex = hex.toString(16);\n\n  if (!isHexStrict(hex)) {\n    throw new Error('Given value \"' + hex + '\" is not a valid hex string.');\n  }\n\n  hex = hex.replace(/^0x/i, '');\n\n  for (var bytes = [], c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substr(c, 2), 16));\n  }\n\n  return bytes;\n};\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object|Buffer} value\n * @param {Boolean} returnType\n * @return {String}\n */\n\n\nvar toHex = function toHex(value, returnType) {\n  /*jshint maxcomplexity: false */\n  if (isAddress(value)) {\n    return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');\n  }\n\n  if (_.isBoolean(value)) {\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n\n  if (Buffer.isBuffer(value)) {\n    return '0x' + value.toString('hex');\n  }\n\n  if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n    return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n  } // if its a negative number, pass it through numberToHex\n\n\n  if (_.isString(value)) {\n    if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n      return returnType ? 'int256' : numberToHex(value);\n    } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n      return returnType ? 'bytes' : value;\n    } else if (!isFinite(value)) {\n      return returnType ? 'string' : utf8ToHex(value);\n    }\n  }\n\n  return returnType ? value < 0 ? 'int256' : 'uint256' : numberToHex(value);\n};\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\n\n\nvar isHexStrict = function isHexStrict(hex) {\n  return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\n\n\nvar isHex = function isHex(hex) {\n  return (_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n};\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} bloom encoded bloom filter\n * @return {Boolean}\n */\n\n\nvar isBloom = function isBloom(bloom) {\n  return ethereumBloomFilters.isBloom(bloom);\n};\n/**\n * Returns true if the ethereum users address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} ethereumAddress encoded bloom filter\n * @param {String} bloom ethereum addresss\n * @return {Boolean}\n */\n\n\nvar isUserEthereumAddressInBloom = function isUserEthereumAddressInBloom(bloom, ethereumAddress) {\n  return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);\n};\n/**\n * Returns true if the contract address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} contractAddress contract addresss\n * @return {Boolean}\n */\n\n\nvar isContractAddressInBloom = function isContractAddressInBloom(bloom, contractAddress) {\n  return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);\n};\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} topic encoded topic\n * @return {Boolean}\n */\n\n\nvar isTopic = function isTopic(topic) {\n  return ethereumBloomFilters.isTopic(topic);\n};\n/**\n * Returns true if the topic is part of the given bloom\n * note: false positives are possible.\n *\n * @method isTopicInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} topic encoded topic\n * @return {Boolean}\n */\n\n\nvar isTopicInBloom = function isTopicInBloom(bloom, topic) {\n  return ethereumBloomFilters.isTopicInBloom(bloom, topic);\n};\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @method isInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String | Uint8Array} topic encoded value\n * @return {Boolean}\n */\n\n\nvar isInBloom = function isInBloom(bloom, topic) {\n  return ethereumBloomFilters.isInBloom(bloom, topic);\n};\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\n\n\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function sha3(value) {\n  if (isBN(value)) {\n    value = value.toString();\n  }\n\n  if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n    value = hexToBytes(value);\n  }\n\n  var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n  if (returnValue === SHA3_NULL_S) {\n    return null;\n  } else {\n    return returnValue;\n  }\n}; // expose the under the hood keccak256\n\n\nsha3._Hash = Hash;\n/**\n * @method sha3Raw\n *\n * @param value\n *\n * @returns {string}\n */\n\nvar sha3Raw = function sha3Raw(value) {\n  value = sha3(value);\n\n  if (value === null) {\n    return SHA3_NULL_S;\n  }\n\n  return value;\n};\n\nmodule.exports = {\n  BN: BN,\n  isBN: isBN,\n  isBigNumber: isBigNumber,\n  toBN: toBN,\n  isAddress: isAddress,\n  isBloom: isBloom,\n  isUserEthereumAddressInBloom: isUserEthereumAddressInBloom,\n  isContractAddressInBloom: isContractAddressInBloom,\n  isTopic: isTopic,\n  isTopicInBloom: isTopicInBloom,\n  isInBloom: isInBloom,\n  checkAddressChecksum: checkAddressChecksum,\n  utf8ToHex: utf8ToHex,\n  hexToUtf8: hexToUtf8,\n  hexToNumber: hexToNumber,\n  hexToNumberString: hexToNumberString,\n  numberToHex: numberToHex,\n  toHex: toHex,\n  hexToBytes: hexToBytes,\n  bytesToHex: bytesToHex,\n  isHex: isHex,\n  isHexStrict: isHexStrict,\n  leftPad: leftPad,\n  rightPad: rightPad,\n  toTwosComplement: toTwosComplement,\n  sha3: sha3,\n  sha3Raw: sha3Raw\n};","map":{"version":3,"sources":["C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/web3-utils/src/utils.js"],"names":["_","require","BN","numberToBN","utf8","Hash","ethereumBloomFilters","isBN","object","isBigNumber","constructor","name","toBN","number","apply","arguments","e","Error","toTwosComplement","toTwos","toString","isAddress","address","test","checkAddressChecksum","replace","addressHash","sha3","toLowerCase","i","parseInt","toUpperCase","leftPad","string","chars","sign","hasPrefix","padding","length","Array","join","rightPad","utf8ToHex","str","encode","hex","split","reverse","code","charCodeAt","n","hexToUtf8","isHexStrict","l","substr","String","fromCharCode","decode","hexToNumber","value","isString","toNumber","hexToNumberString","numberToHex","isNull","isUndefined","isFinite","result","lt","bytesToHex","bytes","push","hexToBytes","c","toHex","returnType","isBoolean","Buffer","isBuffer","isObject","JSON","stringify","indexOf","isNumber","isHex","isBloom","bloom","isUserEthereumAddressInBloom","ethereumAddress","isContractAddressInBloom","contractAddress","isTopic","topic","isTopicInBloom","isInBloom","SHA3_NULL_S","returnValue","keccak256","_Hash","sha3Raw","module","exports"],"mappings":"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","sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar numberToBN = require('number-to-bn');\nvar utf8 = require('utf8');\nvar Hash = require(\"eth-lib/lib/hash\");\nvar ethereumBloomFilters = require('ethereum-bloom-filters');\n\n\n\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBN = function (object) {\n    return BN.isBN(object);\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\nvar toBN = function(number){\n    try {\n        return numberToBN.apply(null, arguments);\n    } catch(e) {\n        throw new Error(e + ' Given value: \"'+ number +'\"');\n    }\n};\n\n\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\nvar toTwosComplement = function (number) {\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar isAddress = function (address) {\n    // check if it has the basic requirements of an address\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n        // If it's ALL lowercase or ALL upppercase\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n        // Otherwise check each case\n    } else {\n        return checkAddressChecksum(address);\n    }\n};\n\n\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\nvar checkAddressChecksum = function (address) {\n    // Check each case\n    address = address.replace(/^0x/i,'');\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar leftPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar rightPad = function (string, chars, sign) {\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n    string = string.toString(16).replace(/^0x/i,'');\n\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\n\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\n};\n\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\nvar utf8ToHex = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n    str = str.replace(/^(?:\\u0000)*/,'');\n    str = str.split(\"\").reverse().join(\"\");\n\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\nvar hexToUtf8 = function(hex) {\n    if (!isHexStrict(hex))\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\n\n    var str = \"\";\n    var code = 0;\n    hex = hex.replace(/^0x/i,'');\n\n    // remove 00 padding from either side\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n    hex = hex.replace(/^(?:00)*/,'');\n    hex = hex.split(\"\").reverse().join(\"\");\n\n    var l = hex.length;\n\n    for (var i=0; i < l; i+=2) {\n        code = parseInt(hex.substr(i, 2), 16);\n        // if (code !== 0) {\n        str += String.fromCharCode(code);\n        // }\n    }\n\n    return utf8.decode(str);\n};\n\n\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumber = function (value) {\n    if (!value) {\n        return value;\n    }\n\n    if (_.isString(value) && !isHexStrict(value)) {\n        throw new Error('Given value \"'+value+'\" is not a valid hex string.');\n    }\n\n    return toBN(value).toNumber();\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar hexToNumberString = function (value) {\n    if (!value) return value;\n\n    if (_.isString(value) && !isHexStrict(value)) {\n        throw new Error('Given value \"'+value+'\" is not a valid hex string.');\n    }\n\n    return toBN(value).toString(10);\n};\n\n\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\nvar numberToHex = function (value) {\n    if (_.isNull(value) || _.isUndefined(value)) {\n        return value;\n    }\n\n    if (!isFinite(value) && !isHexStrict(value)) {\n        throw new Error('Given input \"'+value+'\" is not a number.');\n    }\n\n    var number = toBN(value);\n    var result = number.toString(16);\n\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\nvar bytesToHex = function(bytes) {\n    for (var hex = [], i = 0; i < bytes.length; i++) {\n        /* jshint ignore:start */\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n        /* jshint ignore:end */\n    }\n    return '0x'+ hex.join(\"\");\n};\n\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\nvar hexToBytes = function(hex) {\n    hex = hex.toString(16);\n\n    if (!isHexStrict(hex)) {\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\n    }\n\n    hex = hex.replace(/^0x/i,'');\n\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object|Buffer} value\n * @param {Boolean} returnType\n * @return {String}\n */\nvar toHex = function (value, returnType) {\n    /*jshint maxcomplexity: false */\n\n    if (isAddress(value)) {\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\n    }\n\n    if (_.isBoolean(value)) {\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\n    }\n\n    if (Buffer.isBuffer(value)) {\n        return '0x' + value.toString('hex');\n    }\n\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n    }\n\n    // if its a negative number, pass it through numberToHex\n    if (_.isString(value)) {\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n            return returnType ? 'int256' : numberToHex(value);\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n            return returnType ? 'bytes' : value;\n        } else if (!isFinite(value)) {\n            return returnType ? 'string' : utf8ToHex(value);\n        }\n    }\n\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n};\n\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHexStrict = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\n};\n\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\nvar isHex = function (hex) {\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\n};\n\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} bloom encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    return ethereumBloomFilters.isBloom(bloom);\n};\n\n/**\n * Returns true if the ethereum users address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} ethereumAddress encoded bloom filter\n * @param {String} bloom ethereum addresss\n * @return {Boolean}\n */\nvar isUserEthereumAddressInBloom = function (bloom, ethereumAddress) {\n    return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);\n};\n\n/**\n * Returns true if the contract address is part of the given bloom\n * note: false positives are possible.\n *\n * @method isUserEthereumAddressInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} contractAddress contract addresss\n * @return {Boolean}\n */\nvar isContractAddressInBloom = function (bloom, contractAddress) {\n    return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} topic encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    return ethereumBloomFilters.isTopic(topic);\n};\n\n/**\n * Returns true if the topic is part of the given bloom\n * note: false positives are possible.\n *\n * @method isTopicInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String} topic encoded topic\n * @return {Boolean}\n */\nvar isTopicInBloom = function (bloom, topic) {\n    return ethereumBloomFilters.isTopicInBloom(bloom, topic);\n};\n\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @method isInBloom\n * @param {String} bloom encoded bloom filter\n * @param {String | Uint8Array} topic encoded value\n * @return {Boolean}\n */\nvar isInBloom = function (bloom, topic) {\n    return ethereumBloomFilters.isInBloom(bloom, topic);\n};\n\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n    if (isBN(value)) {\n        value = value.toString();\n    }\n\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\n        value = hexToBytes(value);\n    }\n\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n    if(returnValue === SHA3_NULL_S) {\n        return null;\n    } else {\n        return returnValue;\n    }\n};\n// expose the under the hood keccak256\nsha3._Hash = Hash;\n\n/**\n * @method sha3Raw\n *\n * @param value\n *\n * @returns {string}\n */\nvar sha3Raw = function(value) {\n    value = sha3(value);\n\n    if (value === null) {\n        return SHA3_NULL_S;\n    }\n\n    return value;\n};\n\n\nmodule.exports = {\n    BN: BN,\n    isBN: isBN,\n    isBigNumber: isBigNumber,\n    toBN: toBN,\n    isAddress: isAddress,\n    isBloom: isBloom,\n    isUserEthereumAddressInBloom: isUserEthereumAddressInBloom,\n    isContractAddressInBloom: isContractAddressInBloom,\n    isTopic: isTopic,\n    isTopicInBloom: isTopicInBloom,\n    isInBloom: isInBloom,\n    checkAddressChecksum: checkAddressChecksum,\n    utf8ToHex: utf8ToHex,\n    hexToUtf8: hexToUtf8,\n    hexToNumber: hexToNumber,\n    hexToNumberString: hexToNumberString,\n    numberToHex: numberToHex,\n    toHex: toHex,\n    hexToBytes: hexToBytes,\n    bytesToHex: bytesToHex,\n    isHex: isHex,\n    isHexStrict: isHexStrict,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    toTwosComplement: toTwosComplement,\n    sha3: sha3,\n    sha3Raw: sha3Raw\n};\n"]},"metadata":{},"sourceType":"script"}