{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar utils = require('web3-utils');\n\nvar promiEvent = require('web3-core-promievent');\n\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar EthersTransactionUtils = require('@ethersproject/transactions');\n\nvar Method = function Method(options) {\n  if (!options.call || !options.name) {\n    throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n  }\n\n  this.name = options.name;\n  this.call = options.call;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter;\n  this.outputFormatter = options.outputFormatter;\n  this.transformPayload = options.transformPayload;\n  this.extraFormatters = options.extraFormatters;\n  this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n\n  this.requestManager = options.requestManager; // reference to eth.accounts\n\n  this.accounts = options.accounts;\n  this.defaultBlock = options.defaultBlock || 'latest';\n  this.defaultAccount = options.defaultAccount || null;\n  this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n  this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n  this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n  this.defaultCommon = options.defaultCommon;\n  this.defaultChain = options.defaultChain;\n  this.defaultHardfork = options.defaultHardfork;\n  this.handleRevert = options.handleRevert;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n  this.requestManager = requestManager; // reference to eth.accounts\n\n  if (accounts) {\n    this.accounts = accounts;\n  }\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n  var func = this.buildCall();\n  func.call = this.call;\n  this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n  return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n  var func = this.buildCall();\n  func.call = this.call;\n  var name = this.name.split('.');\n\n  if (name.length > 1) {\n    obj[name[0]] = obj[name[0]] || {};\n    obj[name[0]][name[1]] = func;\n  } else {\n    obj[name[0]] = func;\n  }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\n\n\nMethod.prototype.getCall = function (args) {\n  return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\n\nMethod.prototype.extractCallback = function (args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\n\nMethod.prototype.validateArgs = function (args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n  }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\n\nMethod.prototype.formatInput = function (args) {\n  var _this = this;\n\n  if (!this.inputFormatter) {\n    return args;\n  }\n\n  return this.inputFormatter.map(function (formatter, index) {\n    // bind this for defaultBlock, and defaultAccount\n    return formatter ? formatter.call(_this, args[index]) : args[index];\n  });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\n\nMethod.prototype.formatOutput = function (result) {\n  var _this = this;\n\n  if (_.isArray(result)) {\n    return result.map(function (res) {\n      return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n    });\n  } else {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n  }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\n\n\nMethod.prototype.toPayload = function (args) {\n  var call = this.getCall(args);\n  var callback = this.extractCallback(args);\n  var params = this.formatInput(args);\n  this.validateArgs(params);\n  var payload = {\n    method: call,\n    params: params,\n    callback: callback\n  };\n\n  if (this.transformPayload) {\n    payload = this.transformPayload(payload);\n  }\n\n  return payload;\n};\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n  var method = this,\n      promiseResolved = false,\n      canUnsubscribe = true,\n      timeoutCount = 0,\n      confirmationCount = 0,\n      intervalId = null,\n      lastBlock = null,\n      receiptJSON = '',\n      gasProvided = _.isObject(payload.params[0]) && payload.params[0].gas ? payload.params[0].gas : null,\n      isContractDeployment = _.isObject(payload.params[0]) && payload.params[0].data && payload.params[0].from && !payload.params[0].to,\n      hasBytecode = isContractDeployment && payload.params[0].data.length > 2; // add custom send Methods\n\n  var _ethereumCalls = [new Method({\n    name: 'getBlockByNumber',\n    call: 'eth_getBlockByNumber',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatters.outputBlockFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getTransactionByHash',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionFormatter\n  }), new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatters.outputBlockFormatter\n      }\n    }\n  })]; // attach methods to this._ethereumCall\n\n  var _ethereumCall = {};\n\n  _.each(_ethereumCalls, function (mthd) {\n    mthd.attachToObject(_ethereumCall);\n    mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n  }); // fire \"receipt\" and confirmation events and resolve after\n\n\n  var checkConfirmation = function checkConfirmation(existingReceipt, isPolling, err, blockHeader, sub) {\n    if (!err) {\n      // create fake unsubscribe\n      if (!sub) {\n        sub = {\n          unsubscribe: function unsubscribe() {\n            clearInterval(intervalId);\n          }\n        };\n      } // if we have a valid receipt we don't need to send a request\n\n\n      return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result)). // catch error from requesting receipt\n      catch(function (err) {\n        sub.unsubscribe();\n        promiseResolved = true;\n\n        utils._fireError({\n          message: 'Failed to check for transaction receipt:',\n          data: err\n        }, defer.eventEmitter, defer.reject);\n      }) // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n      .then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(receipt) {\n          var block, latestBlock, latestBlockHash;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(!receipt || !receipt.blockHash)) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  throw new Error('Receipt missing or blockHash null');\n\n                case 2:\n                  // apply extra formatters\n                  if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                  } // check if confirmation listener exists\n\n\n                  if (!(defer.eventEmitter.listeners('confirmation').length > 0)) {\n                    _context.next = 28;\n                    break;\n                  }\n\n                  if (!(existingReceipt === undefined || confirmationCount !== 0)) {\n                    _context.next = 25;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return _ethereumCall.getBlockByNumber('latest');\n\n                case 7:\n                  latestBlock = _context.sent;\n                  latestBlockHash = latestBlock ? latestBlock.hash : null;\n\n                  if (!isPolling) {\n                    _context.next = 24;\n                    break;\n                  }\n\n                  if (!lastBlock) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  _context.next = 13;\n                  return _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n\n                case 13:\n                  block = _context.sent;\n\n                  if (block) {\n                    lastBlock = block;\n                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                  }\n\n                  _context.next = 22;\n                  break;\n\n                case 17:\n                  _context.next = 19;\n                  return _ethereumCall.getBlockByNumber(receipt.blockNumber);\n\n                case 19:\n                  block = _context.sent;\n                  lastBlock = block;\n                  defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n\n                case 22:\n                  _context.next = 25;\n                  break;\n\n                case 24:\n                  defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n\n                case 25:\n                  if (isPolling && block || !isPolling) {\n                    confirmationCount++;\n                  }\n\n                  canUnsubscribe = false;\n\n                  if (confirmationCount === method.transactionConfirmationBlocks + 1) {\n                    // add 1 so we account for conf 0\n                    sub.unsubscribe();\n                    defer.eventEmitter.removeAllListeners();\n                  }\n\n                case 28:\n                  return _context.abrupt(\"return\", receipt);\n\n                case 29:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()) // CHECK for CONTRACT DEPLOYMENT\n      .then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(receipt) {\n          var code, deploymentSuccess;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(isContractDeployment && !promiseResolved)) {\n                    _context2.next = 19;\n                    break;\n                  }\n\n                  if (receipt.contractAddress) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  if (canUnsubscribe) {\n                    sub.unsubscribe();\n                    promiseResolved = true;\n                  }\n\n                  utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n                  return _context2.abrupt(\"return\");\n\n                case 5:\n                  _context2.prev = 5;\n                  _context2.next = 8;\n                  return _ethereumCall.getCode(receipt.contractAddress);\n\n                case 8:\n                  code = _context2.sent;\n                  _context2.next = 13;\n                  break;\n\n                case 11:\n                  _context2.prev = 11;\n                  _context2.t0 = _context2[\"catch\"](5);\n\n                case 13:\n                  if (code) {\n                    _context2.next = 15;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 15:\n                  // If deployment is status.true and there was a real\n                  // bytecode string, assume it was successful.\n                  deploymentSuccess = receipt.status === true && hasBytecode;\n\n                  if (deploymentSuccess || code.length > 2) {\n                    defer.eventEmitter.emit('receipt', receipt); // if contract, return instance instead of receipt\n\n                    if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                      defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                    } else {\n                      defer.resolve(receipt);\n                    } // need to remove listeners, as they aren't removed automatically when succesfull\n\n\n                    if (canUnsubscribe) {\n                      defer.eventEmitter.removeAllListeners();\n                    }\n                  } else {\n                    utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                  }\n\n                  if (canUnsubscribe) {\n                    sub.unsubscribe();\n                  }\n\n                  promiseResolved = true;\n\n                case 19:\n                  return _context2.abrupt(\"return\", receipt);\n\n                case 20:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[5, 11]]);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()) // CHECK for normal tx check for receipt only\n      .then( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(receipt) {\n          var revertMessage, txReplayOptions, rawTransactionHex, parsedTx;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!(!isContractDeployment && !promiseResolved)) {\n                    _context3.next = 35;\n                    break;\n                  }\n\n                  if (!(!receipt.outOfGas && (!gasProvided || gasProvided !== receipt.gasUsed) && (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined'))) {\n                    _context3.next = 7;\n                    break;\n                  }\n\n                  defer.eventEmitter.emit('receipt', receipt);\n                  defer.resolve(receipt); // need to remove listeners, as they aren't removed automatically when succesfull\n\n                  if (canUnsubscribe) {\n                    defer.eventEmitter.removeAllListeners();\n                  }\n\n                  _context3.next = 33;\n                  break;\n\n                case 7:\n                  receiptJSON = JSON.stringify(receipt, null, 2);\n\n                  if (!(receipt.status === false || receipt.status === '0x0')) {\n                    _context3.next = 32;\n                    break;\n                  }\n\n                  _context3.prev = 9;\n                  revertMessage = null;\n\n                  if (!(method.handleRevert && (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'))) {\n                    _context3.next = 24;\n                    break;\n                  }\n\n                  txReplayOptions = payload.params[0]; // If send was raw, fetch the transaction and reconstitute the\n                  // original params so they can be replayed with `eth_call`\n\n                  if (method.call === 'eth_sendRawTransaction') {\n                    rawTransactionHex = payload.params[0];\n                    parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                    txReplayOptions = formatters.inputTransactionFormatter({\n                      data: parsedTx.data,\n                      to: parsedTx.to,\n                      from: parsedTx.from,\n                      gas: parsedTx.gasLimit.toHexString(),\n                      gasPrice: parsedTx.gasPrice.toHexString(),\n                      value: parsedTx.value.toHexString()\n                    });\n                  } // Get revert reason string with eth_call\n\n\n                  _context3.next = 16;\n                  return method.getRevertReason(txReplayOptions, receipt.blockNumber);\n\n                case 16:\n                  revertMessage = _context3.sent;\n\n                  if (!revertMessage) {\n                    _context3.next = 21;\n                    break;\n                  }\n\n                  // Only throw a revert error if a revert reason is existing\n                  utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n                  _context3.next = 22;\n                  break;\n\n                case 21:\n                  throw false;\n\n                case 22:\n                  _context3.next = 25;\n                  break;\n\n                case 24:\n                  throw false;\n\n                case 25:\n                  _context3.next = 30;\n                  break;\n\n                case 27:\n                  _context3.prev = 27;\n                  _context3.t0 = _context3[\"catch\"](9);\n\n                  // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                  utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n                case 30:\n                  _context3.next = 33;\n                  break;\n\n                case 32:\n                  // Throw OOG if status is not existing and provided gas and used gas are equal\n                  utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n                case 33:\n                  if (canUnsubscribe) {\n                    sub.unsubscribe();\n                  }\n\n                  promiseResolved = true;\n\n                case 35:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[9, 27]]);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }()) // time out the transaction if not mined after 50 blocks\n      .catch(function () {\n        timeoutCount++; // check to see if we are http polling\n\n        if (!!isPolling) {\n          // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n          if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        } else {\n          if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        }\n      });\n    } else {\n      sub.unsubscribe();\n      promiseResolved = true;\n\n      utils._fireError({\n        message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n        data: err\n      }, defer.eventEmitter, defer.reject);\n    }\n  }; // start watching for confirmation depending on the support features of the provider\n\n\n  var startWatching = function (existingReceipt) {\n    var startInterval = function startInterval() {\n      intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n    };\n\n    if (!this.requestManager.provider.on) {\n      startInterval();\n    } else {\n      _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n        if (err || !blockHeader) {\n          // fall back to polling\n          startInterval();\n        } else {\n          checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n        }\n      });\n    }\n  }.bind(this); // first check if we already have a confirmed transaction\n\n\n  _ethereumCall.getTransactionReceipt(result).then(function (receipt) {\n    if (receipt && receipt.blockHash) {\n      if (defer.eventEmitter.listeners('confirmation').length > 0) {\n        // We must keep on watching for new Blocks, if a confirmation listener is present\n        startWatching(receipt);\n      }\n\n      checkConfirmation(receipt, false);\n    } else if (!promiseResolved) {\n      startWatching();\n    }\n  }).catch(function () {\n    if (!promiseResolved) startWatching();\n  });\n};\n\nvar getWallet = function getWallet(from, accounts) {\n  var wallet = null; // is index given\n\n  if (_.isNumber(from)) {\n    wallet = accounts.wallet[from]; // is account given\n  } else if (_.isObject(from) && from.address && from.privateKey) {\n    wallet = from; // search in wallet for address\n  } else {\n    wallet = accounts.wallet[from.toLowerCase()];\n  }\n\n  return wallet;\n};\n\nMethod.prototype.buildCall = function () {\n  var method = this,\n      isSendTx = method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction',\n      // || method.call === 'personal_sendTransaction'\n  isCall = method.call === 'eth_call'; // actual send function\n\n  var send = function send() {\n    var defer = promiEvent(!isSendTx),\n        payload = method.toPayload(Array.prototype.slice.call(arguments)); // CALLBACK function\n\n    var sendTxCallback = function sendTxCallback(err, result) {\n      if (method.handleRevert && isCall && method.abiCoder) {\n        var reasonData; // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n        // Geth >= 1.9.15 attaches the reason data to an error object.\n        // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n\n        if (!err && method.isRevertReasonString(result)) {\n          reasonData = result.substring(10);\n        } else if (err && err.data) {\n          reasonData = err.data.substring(10);\n        }\n\n        if (reasonData) {\n          var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n          var signature = 'Error(String)';\n\n          utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n            reason: reason,\n            signature: signature\n          });\n\n          return;\n        }\n      }\n\n      try {\n        result = method.formatOutput(result);\n      } catch (e) {\n        err = e;\n      }\n\n      if (result instanceof Error) {\n        err = result;\n      }\n\n      if (!err) {\n        if (payload.callback) {\n          payload.callback(null, result);\n        }\n      } else {\n        if (err.error) {\n          err = err.error;\n        }\n\n        return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n      } // return PROMISE\n\n\n      if (!isSendTx) {\n        if (!err) {\n          defer.resolve(result);\n        } // return PROMIEVENT\n\n      } else {\n        defer.eventEmitter.emit('transactionHash', result);\n\n        method._confirmTransaction(defer, result, payload);\n      }\n    }; // SENDS the SIGNED SIGNATURE\n\n\n    var sendSignedTx = function sendSignedTx(sign) {\n      var signedPayload = _.extend({}, payload, {\n        method: 'eth_sendRawTransaction',\n        params: [sign.rawTransaction]\n      });\n\n      method.requestManager.send(signedPayload, sendTxCallback);\n    };\n\n    var sendRequest = function sendRequest(payload, method) {\n      if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n        var wallet; // ETH_SENDTRANSACTION\n\n        if (payload.method === 'eth_sendTransaction') {\n          var tx = payload.params[0];\n          wallet = getWallet(_.isObject(tx) ? tx.from : null, method.accounts); // If wallet was found, sign tx, and send using sendRawTransaction\n\n          if (wallet && wallet.privateKey) {\n            var txOptions = _.omit(tx, 'from');\n\n            if (method.defaultChain && !txOptions.chain) {\n              txOptions.chain = method.defaultChain;\n            }\n\n            if (method.defaultHardfork && !txOptions.hardfork) {\n              txOptions.hardfork = method.defaultHardfork;\n            }\n\n            if (method.defaultCommon && !txOptions.common) {\n              txOptions.common = method.defaultCommon;\n            }\n\n            return method.accounts.signTransaction(txOptions, wallet.privateKey).then(sendSignedTx).catch(function (err) {\n              if (_.isFunction(defer.eventEmitter.listeners) && defer.eventEmitter.listeners('error').length) {\n                defer.eventEmitter.emit('error', err);\n                defer.eventEmitter.removeAllListeners();\n                defer.eventEmitter.catch(function () {});\n              }\n\n              defer.reject(err);\n            });\n          } // ETH_SIGN\n\n        } else if (payload.method === 'eth_sign') {\n          var data = payload.params[1];\n          wallet = getWallet(payload.params[0], method.accounts); // If wallet was found, sign tx, and send using sendRawTransaction\n\n          if (wallet && wallet.privateKey) {\n            var sign = method.accounts.sign(data, wallet.privateKey);\n\n            if (payload.callback) {\n              payload.callback(null, sign.signature);\n            }\n\n            defer.resolve(sign.signature);\n            return;\n          }\n        }\n      }\n\n      return method.requestManager.send(payload, sendTxCallback);\n    }; // Send the actual transaction\n\n\n    if (isSendTx && _.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {\n      var getGasPrice = new Method({\n        name: 'getGasPrice',\n        call: 'eth_gasPrice',\n        params: 0\n      }).createFunction(method.requestManager);\n      getGasPrice(function (err, gasPrice) {\n        if (gasPrice) {\n          payload.params[0].gasPrice = gasPrice;\n        }\n\n        if (isSendTx) {\n          setTimeout(function () {\n            defer.eventEmitter.emit('sending', payload);\n          }, 0);\n        }\n\n        sendRequest(payload, method);\n      });\n    } else {\n      if (isSendTx) {\n        setTimeout(function () {\n          defer.eventEmitter.emit('sending', payload);\n        }, 0);\n      }\n\n      sendRequest(payload, method);\n    }\n\n    if (isSendTx) {\n      setTimeout(function () {\n        defer.eventEmitter.emit('sent', payload);\n      }, 0);\n    }\n\n    return defer.eventEmitter;\n  }; // necessary to attach things to the method\n\n\n  send.method = method; // necessary for batch requests\n\n  send.request = this.request.bind(this);\n  return send;\n};\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\n\n\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    new Method({\n      name: 'call',\n      call: 'eth_call',\n      params: 2,\n      abiCoder: self.abiCoder,\n      handleRevert: true\n    }).createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber)).then(function () {\n      resolve(false);\n    }).catch(function (error) {\n      if (error.reason) {\n        resolve({\n          reason: error.reason,\n          signature: error.signature\n        });\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\n\n\nMethod.prototype.isRevertReasonString = function (data) {\n  return _.isString(data) && (data.length - 2) / 2 % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\n\n\nMethod.prototype.request = function () {\n  var payload = this.toPayload(Array.prototype.slice.call(arguments));\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n};\n\nmodule.exports = Method;","map":{"version":3,"sources":["C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/web3-core-method/src/index.js"],"names":["_","require","errors","formatters","utils","promiEvent","Subscriptions","subscriptions","EthersTransactionUtils","Method","options","call","name","Error","params","inputFormatter","outputFormatter","transformPayload","extraFormatters","abiCoder","requestManager","accounts","defaultBlock","defaultAccount","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","defaultCommon","defaultChain","defaultHardfork","handleRevert","prototype","setRequestManager","createFunction","func","buildCall","attachToObject","obj","split","length","getCall","args","isFunction","extractCallback","pop","validateArgs","InvalidNumberOfParams","formatInput","_this","map","formatter","index","formatOutput","result","isArray","res","toPayload","callback","payload","method","_confirmTransaction","defer","promiseResolved","canUnsubscribe","timeoutCount","confirmationCount","intervalId","lastBlock","receiptJSON","gasProvided","isObject","gas","isContractDeployment","data","from","to","hasBytecode","_ethereumCalls","inputBlockNumberFormatter","val","outputBlockFormatter","outputTransactionReceiptFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","outputTransactionFormatter","type","subscriptionName","_ethereumCall","each","mthd","checkConfirmation","existingReceipt","isPolling","err","blockHeader","sub","unsubscribe","clearInterval","resolve","getTransactionReceipt","catch","_fireError","message","eventEmitter","reject","then","receipt","blockHash","receiptFormatter","listeners","undefined","getBlockByNumber","latestBlock","latestBlockHash","hash","number","block","emit","blockNumber","removeAllListeners","contractAddress","NoContractAddressFoundError","getCode","code","deploymentSuccess","status","contractDeployFormatter","ContractCodeNotStoredError","outOfGas","gasUsed","JSON","stringify","revertMessage","txReplayOptions","rawTransactionHex","parsedTx","parse","inputTransactionFormatter","gasLimit","toHexString","gasPrice","value","getRevertReason","TransactionRevertInstructionError","reason","signature","TransactionRevertedWithoutReasonError","TransactionOutOfGasError","TransactionError","startWatching","startInterval","setInterval","bind","provider","on","subscribe","getWallet","wallet","isNumber","address","privateKey","toLowerCase","isSendTx","isCall","send","Array","slice","arguments","sendTxCallback","reasonData","isRevertReasonString","substring","decodeParameter","RevertInstructionError","e","error","sendSignedTx","sign","signedPayload","extend","rawTransaction","sendRequest","tx","txOptions","omit","chain","hardfork","common","signTransaction","getGasPrice","setTimeout","request","self","Promise","numberToHex","isString","format","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n'use strict';\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar EthersTransactionUtils = require('@ethersproject/transactions');\n\nvar Method = function Method(options) {\n\n    if (!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n    this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n\n    this.requestManager = options.requestManager;\n\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n    this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n    this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n    this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n    this.defaultCommon = options.defaultCommon;\n    this.defaultChain = options.defaultChain;\n    this.defaultHardfork = options.defaultHardfork;\n    this.handleRevert = options.handleRevert;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n\n    return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n\n    if (_.isArray(result)) {\n        return result.map(function (res) {\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    } else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n\n    return payload;\n};\n\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this,\n        promiseResolved = false,\n        canUnsubscribe = true,\n        timeoutCount = 0,\n        confirmationCount = 0,\n        intervalId = null,\n        lastBlock = null,\n        receiptJSON = '',\n        gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,\n        isContractDeployment = _.isObject(payload.params[0]) &&\n            payload.params[0].data &&\n            payload.params[0].from &&\n            !payload.params[0].to,\n        hasBytecode = isContractDeployment && payload.params[0].data.length > 2;\n\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getBlockByNumber',\n            call: 'eth_getBlockByNumber',\n            params: 2,\n            inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n                return !!val;\n            }],\n            outputFormatter: formatters.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getTransactionByHash',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionFormatter\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n\n\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n            // catch error from requesting receipt\n                .catch(function (err) {\n                    sub.unsubscribe();\n                    promiseResolved = true;\n                    utils._fireError(\n                        {\n                            message: 'Failed to check for transaction receipt:',\n                            data: err\n                        },\n                        defer.eventEmitter,\n                        defer.reject\n                    );\n                })\n                // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n                .then(async function (receipt) {\n                    if (!receipt || !receipt.blockHash) {\n                        throw new Error('Receipt missing or blockHash null');\n                    }\n\n                    // apply extra formatters\n                    if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                        receipt = method.extraFormatters.receiptFormatter(receipt);\n                    }\n\n                    // check if confirmation listener exists\n                    if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                        var block;\n\n                        // If there was an immediately retrieved receipt, it's already\n                        // been confirmed by the direct call to checkConfirmation needed\n                        // for parity instant-seal\n                        if (existingReceipt === undefined || confirmationCount !== 0) {\n                            // Get latest block to emit with confirmation\n                            var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n                            var latestBlockHash = latestBlock ? latestBlock.hash : null;\n\n                            if (isPolling) { // Check if actually a new block is existing on polling\n                                if (lastBlock) {\n                                    block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n                                    if (block) {\n                                        lastBlock = block;\n                                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                                    }\n                                } else {\n                                    block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                                    lastBlock = block;\n                                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                                }\n                            } else {\n                                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                            }\n                        }\n\n                        if ((isPolling && block) || !isPolling) {\n                            confirmationCount++;\n                        }\n                        canUnsubscribe = false;\n\n                        if (confirmationCount === method.transactionConfirmationBlocks + 1) { // add 1 so we account for conf 0\n                            sub.unsubscribe();\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n\n                    return receipt;\n                })\n                // CHECK for CONTRACT DEPLOYMENT\n                .then(async function (receipt) {\n\n                    if (isContractDeployment && !promiseResolved) {\n\n                        if (!receipt.contractAddress) {\n\n                            if (canUnsubscribe) {\n                                sub.unsubscribe();\n                                promiseResolved = true;\n                            }\n\n                            utils._fireError(\n                                errors.NoContractAddressFoundError(receipt),\n                                defer.eventEmitter,\n                                defer.reject,\n                                null,\n                                receipt\n                            );\n                            return;\n                        }\n\n                        var code;\n                        try {\n                            code = await _ethereumCall.getCode(receipt.contractAddress);\n                        } catch(err){\n                            // ignore;\n                        }\n\n                        if (!code) {\n                            return;\n                        }\n\n                        // If deployment is status.true and there was a real\n                        // bytecode string, assume it was successful.\n                        var deploymentSuccess = receipt.status === true && hasBytecode;\n\n                        if (deploymentSuccess || code.length > 2) {\n                            defer.eventEmitter.emit('receipt', receipt);\n\n                            // if contract, return instance instead of receipt\n                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                            } else {\n                                defer.resolve(receipt);\n                            }\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            utils._fireError(\n                                errors.ContractCodeNotStoredError(receipt),\n                                defer.eventEmitter,\n                                defer.reject,\n                                null,\n                                receipt\n                            );\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    }\n\n                    return receipt;\n                })\n                // CHECK for normal tx check for receipt only\n                .then(async function (receipt) {\n                    if (!isContractDeployment && !promiseResolved) {\n                        if (!receipt.outOfGas &&\n                            (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                            (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                            defer.eventEmitter.emit('receipt', receipt);\n                            defer.resolve(receipt);\n\n                            // need to remove listeners, as they aren't removed automatically when succesfull\n                            if (canUnsubscribe) {\n                                defer.eventEmitter.removeAllListeners();\n                            }\n\n                        } else {\n                            receiptJSON = JSON.stringify(receipt, null, 2);\n\n                            if (receipt.status === false || receipt.status === '0x0') {\n                                try {\n                                    var revertMessage = null;\n\n                                    if ( method.handleRevert &&\n                                        (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'))\n                                    {\n                                        var txReplayOptions = payload.params[0];\n\n                                        // If send was raw, fetch the transaction and reconstitute the\n                                        // original params so they can be replayed with `eth_call`\n                                        if (method.call === 'eth_sendRawTransaction'){\n                                            var rawTransactionHex = payload.params[0];\n\n                                            var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n\n                                            txReplayOptions = formatters.inputTransactionFormatter({\n                                                data: parsedTx.data,\n                                                to: parsedTx.to,\n                                                from: parsedTx.from,\n                                                gas: parsedTx.gasLimit.toHexString(),\n                                                gasPrice: parsedTx.gasPrice.toHexString(),\n                                                value: parsedTx.value.toHexString()\n                                            })\n                                        }\n\n                                        // Get revert reason string with eth_call\n                                        revertMessage = await method.getRevertReason(\n                                            txReplayOptions,\n                                            receipt.blockNumber\n                                        );\n\n                                        if (revertMessage) { // Only throw a revert error if a revert reason is existing\n                                            utils._fireError(\n                                                errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt),\n                                                defer.eventEmitter,\n                                                defer.reject,\n                                                null,\n                                                receipt\n                                            );\n                                        } else {\n                                            throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                        }\n                                    } else {\n                                        throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                    }\n                                } catch (error) {\n                                    // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                                    utils._fireError(\n                                        errors.TransactionRevertedWithoutReasonError(receipt),\n                                        defer.eventEmitter,\n                                        defer.reject,\n                                        null,\n                                        receipt\n                                    );\n                                }\n                            } else {\n                                // Throw OOG if status is not existing and provided gas and used gas are equal\n                                utils._fireError(\n                                    errors.TransactionOutOfGasError(receipt),\n                                    defer.eventEmitter,\n                                    defer.reject,\n                                    null,\n                                    receipt\n                                );\n                            }\n                        }\n\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                        }\n                        promiseResolved = true;\n                    }\n\n                })\n                // time out the transaction if not mined after 50 blocks\n                .catch(function () {\n                    timeoutCount++;\n\n                    // check to see if we are http polling\n                    if (!!isPolling) {\n                        // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n                        if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                            utils._fireError(\n                                errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'),\n                                defer.eventEmitter,\n                                defer.reject\n                            );\n                        }\n                    } else {\n                        if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                            utils._fireError(\n                                errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'),\n                                defer.eventEmitter,\n                                defer.reject\n                            );\n                        }\n                    }\n                });\n\n\n        } else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({\n                message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n                data: err\n            }, defer.eventEmitter, defer.reject);\n        }\n    };\n\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function (existingReceipt) {\n        const startInterval = () => {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        }\n\n        if (!this.requestManager.provider.on) {\n            startInterval()\n        } else {\n            _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n                if (err || !blockHeader) {\n                    // fall back to polling\n                    startInterval()\n                } else {\n                    checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n                }\n            })\n        }\n    }.bind(this);\n\n\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n        .then(function (receipt) {\n            if (receipt && receipt.blockHash) {\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                    // We must keep on watching for new Blocks, if a confirmation listener is present\n                    startWatching(receipt);\n                }\n                checkConfirmation(receipt, false);\n\n            } else if (!promiseResolved) {\n                startWatching();\n            }\n        })\n        .catch(function () {\n            if (!promiseResolved) startWatching();\n        });\n\n};\n\n\nvar getWallet = function (from, accounts) {\n    var wallet = null;\n\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n\n        // is account given\n    } else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n\n        // search in wallet for address\n    } else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n\n    return wallet;\n};\n\nMethod.prototype.buildCall = function () {\n    var method = this,\n        isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'), // || method.call === 'personal_sendTransaction'\n        isCall = (method.call === 'eth_call');\n\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx),\n            payload = method.toPayload(Array.prototype.slice.call(arguments));\n\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            if (method.handleRevert && isCall && method.abiCoder) {\n                var reasonData;\n\n                // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n                // Geth >= 1.9.15 attaches the reason data to an error object.\n                // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n                if (!err && method.isRevertReasonString(result)){\n                    reasonData = result.substring(10);\n                } else if (err && err.data){\n                    reasonData = err.data.substring(10);\n                }\n\n                if (reasonData){\n                    var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n                    var signature = 'Error(String)';\n\n                    utils._fireError(\n                        errors.RevertInstructionError(reason, signature),\n                        defer.eventEmitter,\n                        defer.reject,\n                        payload.callback,\n                        {\n                            reason: reason,\n                            signature: signature\n                        }\n                    );\n\n                    return;\n                }\n            }\n\n            try {\n                result = method.formatOutput(result);\n            } catch (e) {\n                err = e;\n            }\n\n            if (result instanceof Error) {\n                err = result;\n            }\n\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            } else {\n                if (err.error) {\n                    err = err.error;\n                }\n\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n\n            // return PROMISE\n            if (!isSendTx) {\n                if (!err) {\n                    defer.resolve(result);\n                }\n\n                // return PROMIEVENT\n            } else {\n                defer.eventEmitter.emit('transactionHash', result);\n\n                method._confirmTransaction(defer, result, payload);\n            }\n\n        };\n\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function (sign) {\n\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n\n\n        var sendRequest = function (payload, method) {\n\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var txOptions = _.omit(tx, 'from');\n\n                        if (method.defaultChain && !txOptions.chain) {\n                            txOptions.chain = method.defaultChain;\n                        }\n\n                        if (method.defaultHardfork && !txOptions.hardfork) {\n                            txOptions.hardfork = method.defaultHardfork;\n                        }\n\n                        if (method.defaultCommon && !txOptions.common) {\n                            txOptions.common = method.defaultCommon;\n                        }\n\n                        return method.accounts.signTransaction(txOptions, wallet.privateKey)\n                            .then(sendSignedTx)\n                            .catch(function (err) {\n                                if (_.isFunction(defer.eventEmitter.listeners) && defer.eventEmitter.listeners('error').length) {\n                                    defer.eventEmitter.emit('error', err);\n                                    defer.eventEmitter.removeAllListeners();\n                                    defer.eventEmitter.catch(function () {\n                                    });\n                                }\n                                defer.reject(err);\n                            });\n                    }\n\n                    // ETH_SIGN\n                } else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n\n\n                }\n            }\n\n\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n\n        // Send the actual transaction\n        if (isSendTx && _.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {\n\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n\n            getGasPrice(function (err, gasPrice) {\n\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n\n                if (isSendTx) {\n                    setTimeout(() => {\n                        defer.eventEmitter.emit('sending', payload);\n                    }, 0);\n                }\n\n                sendRequest(payload, method);\n            });\n\n        } else {\n            if (isSendTx) {\n                setTimeout(() => {\n                    defer.eventEmitter.emit('sending', payload);\n                }, 0);\n            }\n\n            sendRequest(payload, method);\n        }\n\n        if (isSendTx) {\n            setTimeout(() => {\n                defer.eventEmitter.emit('sent', payload);\n            }, 0);\n        }\n\n        return defer.eventEmitter;\n    };\n\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n    var self = this;\n\n    return new Promise(function (resolve, reject) {\n        (new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            abiCoder: self.abiCoder,\n            handleRevert: true\n        }))\n            .createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber))\n            .then(function () {\n                resolve(false);\n            })\n            .catch(function (error) {\n                if (error.reason) {\n                    resolve({\n                        reason: error.reason,\n                        signature: error.signature\n                    });\n                } else {\n                    reject(error);\n                }\n            });\n    });\n};\n\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\nMethod.prototype.isRevertReasonString = function (data) {\n    return _.isString(data) && ((data.length - 2) / 2) % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n"]},"metadata":{},"sourceType":"script"}