{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\adars\\\\OneDrive\\\\Desktop\\\\defi_yield_farming-main\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport DaiToken from '../abis/DaiToken.json';\nimport DappToken from '../abis/DappToken.json';\nimport TokenFarm from '../abis/TokenFarm.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport './App.css';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, daiTokenData, daiToken, daiTokenBalance, dappTokenData, dappToken, dappTokenBalance, tokenFarmData, tokenFarm, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context2.sent;\n                // Load DaiToken\n                daiTokenData = DaiToken.networks[networkId];\n\n                if (!daiTokenData) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                daiToken = new web3.eth.Contract(DaiToken.abi, daiTokenData.address);\n                this.setState({\n                  daiToken\n                });\n                _context2.next = 14;\n                return daiToken.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                daiTokenBalance = _context2.sent;\n                this.setState({\n                  daiTokenBalance: daiTokenBalance.toString()\n                });\n                _context2.next = 19;\n                break;\n\n              case 18:\n                window.alert('DaiToken contract not deployed to detected network.');\n\n              case 19:\n                // Load DappToken\n                dappTokenData = DappToken.networks[networkId];\n\n                if (!dappTokenData) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                dappToken = new web3.eth.Contract(DappToken.abi, dappTokenData.address);\n                this.setState({\n                  dappToken\n                });\n                _context2.next = 25;\n                return dappToken.methods.balanceOf(this.state.account).call();\n\n              case 25:\n                dappTokenBalance = _context2.sent;\n                this.setState({\n                  dappTokenBalance: dappTokenBalance.toString()\n                });\n                _context2.next = 30;\n                break;\n\n              case 29:\n                window.alert('DappToken contract not deployed to detected network.');\n\n              case 30:\n                // Load TokenFarm\n                tokenFarmData = TokenFarm.networks[networkId];\n\n                if (!tokenFarmData) {\n                  _context2.next = 40;\n                  break;\n                }\n\n                tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address);\n                this.setState({\n                  tokenFarm\n                });\n                _context2.next = 36;\n                return tokenFarm.methods.stakingBalance(this.state.account).call();\n\n              case 36:\n                stakingBalance = _context2.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                _context2.next = 41;\n                break;\n\n              case 40:\n                window.alert('TokenFarm contract not deployed to detected network.');\n\n              case 41:\n                this.setState({\n                  loading: false\n                });\n\n              case 42:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.daiToken.methods.approve(_this.state.tokenFarm._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.tokenFarm.methods.stakeTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.unstakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tokenFarm.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      daiToken: {},\n      dappToken: {},\n      tokenFarm: {},\n      daiTokenBalance: '0',\n      dappTokenBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }\n        }, \"Loading...\");\n      } else {\n        content = /*#__PURE__*/React.createElement(Main, {\n          daiTokenBalance: this.state.daiTokenBalance,\n          dappTokenBalance: this.state.dappTokenBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens,\n          unstakeTokens: this.unstakeTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/adars/OneDrive/Desktop/defi_yield_farming-main/src/components/App.js"],"names":["React","Component","Web3","DaiToken","DappToken","TokenFarm","Navbar","Main","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","setState","account","net","getId","networkId","daiTokenData","networks","daiToken","Contract","abi","address","methods","balanceOf","state","call","daiTokenBalance","toString","alert","dappTokenData","dappToken","dappTokenBalance","tokenFarmData","tokenFarm","stakingBalance","loading","ethereum","enable","currentProvider","props","stakeTokens","amount","approve","_address","send","from","on","hash","unstakeTokens","content","maxWidth"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,WAAP;;IAEMC,G;;;;;;;;;;;;;;uBAGI,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;AAIAC,gBAAAA,I,GAAOC,MAAM,CAACD,I;;uBAEGA,IAAI,CAACE,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAAEC,kBAAAA,OAAO,EAAEF,QAAQ,CAAC,CAAD;AAAnB,iBAAd;;uBAEwBJ,IAAI,CAACE,GAAL,CAASK,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AAEN;AACMC,gBAAAA,Y,GAAelB,QAAQ,CAACmB,QAAT,CAAkBF,SAAlB,C;;qBAClBC,Y;;;;;AACKE,gBAAAA,Q,GAAW,IAAIZ,IAAI,CAACE,GAAL,CAASW,QAAb,CAAsBrB,QAAQ,CAACsB,GAA/B,EAAoCJ,YAAY,CAACK,OAAjD,C;AACjB,qBAAKV,QAAL,CAAc;AAAEO,kBAAAA;AAAF,iBAAd;;uBAC4BA,QAAQ,CAACI,OAAT,CAAiBC,SAAjB,CAA2B,KAAKC,KAAL,CAAWZ,OAAtC,EAA+Ca,IAA/C,E;;;AAAxBC,gBAAAA,e;AACJ,qBAAKf,QAAL,CAAc;AAAEe,kBAAAA,eAAe,EAAEA,eAAe,CAACC,QAAhB;AAAnB,iBAAd;;;;;AAEApB,gBAAAA,MAAM,CAACqB,KAAP,CAAa,qDAAb;;;AAGF;AACMC,gBAAAA,a,GAAgB9B,SAAS,CAACkB,QAAV,CAAmBF,SAAnB,C;;qBACnBc,a;;;;;AACKC,gBAAAA,S,GAAY,IAAIxB,IAAI,CAACE,GAAL,CAASW,QAAb,CAAsBpB,SAAS,CAACqB,GAAhC,EAAqCS,aAAa,CAACR,OAAnD,C;AAClB,qBAAKV,QAAL,CAAc;AAAEmB,kBAAAA;AAAF,iBAAd;;uBAC6BA,SAAS,CAACR,OAAV,CAAkBC,SAAlB,CAA4B,KAAKC,KAAL,CAAWZ,OAAvC,EAAgDa,IAAhD,E;;;AAAzBM,gBAAAA,gB;AACJ,qBAAKpB,QAAL,CAAc;AAAEoB,kBAAAA,gBAAgB,EAAEA,gBAAgB,CAACJ,QAAjB;AAApB,iBAAd;;;;;AAEApB,gBAAAA,MAAM,CAACqB,KAAP,CAAa,sDAAb;;;AAGF;AACMI,gBAAAA,a,GAAgBhC,SAAS,CAACiB,QAAV,CAAmBF,SAAnB,C;;qBACnBiB,a;;;;;AACKC,gBAAAA,S,GAAY,IAAI3B,IAAI,CAACE,GAAL,CAASW,QAAb,CAAsBnB,SAAS,CAACoB,GAAhC,EAAqCY,aAAa,CAACX,OAAnD,C;AAClB,qBAAKV,QAAL,CAAc;AAAEsB,kBAAAA;AAAF,iBAAd;;uBAC2BA,SAAS,CAACX,OAAV,CAAkBY,cAAlB,CAAiC,KAAKV,KAAL,CAAWZ,OAA5C,EAAqDa,IAArD,E;;;AAAvBS,gBAAAA,c;AACJ,qBAAKvB,QAAL,CAAc;AAAEuB,kBAAAA,cAAc,EAAEA,cAAc,CAACP,QAAf;AAAlB,iBAAd;;;;;AAEApB,gBAAAA,MAAM,CAACqB,KAAP,CAAa,sDAAb;;;AAGF,qBAAKjB,QAAL,CAAc;AAAEwB,kBAAAA,OAAO,EAAE;AAAX,iBAAd;;;;;;;;;;;;;;;;;;;;;;;;qBAII5B,MAAM,CAAC6B,Q;;;;;AACT7B,gBAAAA,MAAM,CAACD,IAAP,GAAc,IAAIT,IAAJ,CAASU,MAAM,CAAC6B,QAAhB,CAAd;;uBACM7B,MAAM,CAAC6B,QAAP,CAAgBC,MAAhB,E;;;;;;;AAEH,oBAAI9B,MAAM,CAACD,IAAX,EAAiB;AACpBC,kBAAAA,MAAM,CAACD,IAAP,GAAc,IAAIT,IAAJ,CAASU,MAAM,CAACD,IAAP,CAAYgC,eAArB,CAAd;AACD,iBAFI,MAGA;AACH/B,kBAAAA,MAAM,CAACqB,KAAP,CAAa,qEAAb;AACD;;;;;;;;;;;;;;;;;;AAmBH,eAAYW,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAhBnBC,WAgBmB,GAhBL,UAACC,MAAD,EAAY;AACxB,YAAK9B,QAAL,CAAc;AAAEwB,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACA,YAAKX,KAAL,CAAWN,QAAX,CAAoBI,OAApB,CAA4BoB,OAA5B,CAAoC,MAAKlB,KAAL,CAAWS,SAAX,CAAqBU,QAAzD,EAAmEF,MAAnE,EAA2EG,IAA3E,CAAgF;AAAEC,QAAAA,IAAI,EAAE,MAAKrB,KAAL,CAAWZ;AAAnB,OAAhF,EAA8GkC,EAA9G,CAAiH,iBAAjH,EAAoI,UAACC,IAAD,EAAU;AAC5I,cAAKvB,KAAL,CAAWS,SAAX,CAAqBX,OAArB,CAA6BkB,WAA7B,CAAyCC,MAAzC,EAAiDG,IAAjD,CAAsD;AAAEC,UAAAA,IAAI,EAAE,MAAKrB,KAAL,CAAWZ;AAAnB,SAAtD,EAAoFkC,EAApF,CAAuF,iBAAvF,EAA0G,UAACC,IAAD,EAAU;AAClH,gBAAKpC,QAAL,CAAc;AAAEwB,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD,SAFD;AAGD,OAJD;AAKD,KASkB;;AAAA,UAPnBa,aAOmB,GAPH,UAACP,MAAD,EAAY;AAC1B,YAAK9B,QAAL,CAAc;AAAEwB,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACA,YAAKX,KAAL,CAAWS,SAAX,CAAqBX,OAArB,CAA6B0B,aAA7B,GAA6CJ,IAA7C,CAAkD;AAAEC,QAAAA,IAAI,EAAE,MAAKrB,KAAL,CAAWZ;AAAnB,OAAlD,EAAgFkC,EAAhF,CAAmF,iBAAnF,EAAsG,UAACC,IAAD,EAAU;AAC9G,cAAKpC,QAAL,CAAc;AAAEwB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD,OAFD;AAGD,KAEkB;;AAEjB,UAAKX,KAAL,GAAa;AACXZ,MAAAA,OAAO,EAAE,KADE;AAEXM,MAAAA,QAAQ,EAAE,EAFC;AAGXY,MAAAA,SAAS,EAAE,EAHA;AAIXG,MAAAA,SAAS,EAAE,EAJA;AAKXP,MAAAA,eAAe,EAAE,GALN;AAMXK,MAAAA,gBAAgB,EAAE,GANP;AAOXG,MAAAA,cAAc,EAAE,GAPL;AAQXC,MAAAA,OAAO,EAAE;AARE,KAAb;AAFiB;AAYlB;;;;6BAEQ;AACP,UAAIc,OAAJ;;AACA,UAAG,KAAKzB,KAAL,CAAWW,OAAd,EAAuB;AACrBc,QAAAA,OAAO,gBAAG;AAAG,UAAA,EAAE,EAAC,QAAN;AAAe,UAAA,SAAS,EAAC,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAV;AACD,OAFD,MAEO;AACLA,QAAAA,OAAO,gBAAG,oBAAC,IAAD;AACR,UAAA,eAAe,EAAE,KAAKzB,KAAL,CAAWE,eADpB;AAER,UAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWO,gBAFrB;AAGR,UAAA,cAAc,EAAE,KAAKP,KAAL,CAAWU,cAHnB;AAIR,UAAA,WAAW,EAAE,KAAKM,WAJV;AAKR,UAAA,aAAa,EAAE,KAAKQ,aALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAV;AAOD;;AAED,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKxB,KAAL,CAAWZ,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,2BAA5B;AAAwD,QAAA,KAAK,EAAE;AAAEsC,UAAAA,QAAQ,EAAE;AAAZ,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,IAAI,EAAC,wCADP;AAEE,QAAA,MAAM,EAAC,QAFT;AAGE,QAAA,GAAG,EAAC,qBAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAQGD,OARH,CADF,CADF,CADF,CAFF,CADF;AAsBD;;;;EAlIerD,S;;AAqIlB,eAAeO,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport DaiToken from '../abis/DaiToken.json'\nimport DappToken from '../abis/DappToken.json'\nimport TokenFarm from '../abis/TokenFarm.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport './App.css'\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n    const networkId = await web3.eth.net.getId()\n\n    // Load DaiToken\n    const daiTokenData = DaiToken.networks[networkId]\n    if(daiTokenData) {\n      const daiToken = new web3.eth.Contract(DaiToken.abi, daiTokenData.address)\n      this.setState({ daiToken })\n      let daiTokenBalance = await daiToken.methods.balanceOf(this.state.account).call()\n      this.setState({ daiTokenBalance: daiTokenBalance.toString() })\n    } else {\n      window.alert('DaiToken contract not deployed to detected network.')\n    }\n\n    // Load DappToken\n    const dappTokenData = DappToken.networks[networkId]\n    if(dappTokenData) {\n      const dappToken = new web3.eth.Contract(DappToken.abi, dappTokenData.address)\n      this.setState({ dappToken })\n      let dappTokenBalance = await dappToken.methods.balanceOf(this.state.account).call()\n      this.setState({ dappTokenBalance: dappTokenBalance.toString() })\n    } else {\n      window.alert('DappToken contract not deployed to detected network.')\n    }\n\n    // Load TokenFarm\n    const tokenFarmData = TokenFarm.networks[networkId]\n    if(tokenFarmData) {\n      const tokenFarm = new web3.eth.Contract(TokenFarm.abi, tokenFarmData.address)\n      this.setState({ tokenFarm })\n      let stakingBalance = await tokenFarm.methods.stakingBalance(this.state.account).call()\n      this.setState({ stakingBalance: stakingBalance.toString() })\n    } else {\n      window.alert('TokenFarm contract not deployed to detected network.')\n    }\n\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  stakeTokens = (amount) => {\n    this.setState({ loading: true })\n    this.state.daiToken.methods.approve(this.state.tokenFarm._address, amount).send({ from: this.state.account }).on('transactionHash', (hash) => {\n      this.state.tokenFarm.methods.stakeTokens(amount).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  unstakeTokens = (amount) => {\n    this.setState({ loading: true })\n    this.state.tokenFarm.methods.unstakeTokens().send({ from: this.state.account }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      daiToken: {},\n      dappToken: {},\n      tokenFarm: {},\n      daiTokenBalance: '0',\n      dappTokenBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    }\n  }\n\n  render() {\n    let content\n    if(this.state.loading) {\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n    } else {\n      content = <Main\n        daiTokenBalance={this.state.daiTokenBalance}\n        dappTokenBalance={this.state.dappTokenBalance}\n        stakingBalance={this.state.stakingBalance}\n        stakeTokens={this.stakeTokens}\n        unstakeTokens={this.unstakeTokens}\n      />\n    }\n\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}